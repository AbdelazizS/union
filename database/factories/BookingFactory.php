<?php

namespace Database\Factories;

use App\Models\Booking;
use App\Models\Service;
use App\Models\Coupon;
use Illuminate\Database\Eloquent\Factories\Factory;

class BookingFactory extends Factory
{
    protected $model = Booking::class;

    public function definition(): array
    {
        $service = Service::factory()->create();
        $duration = $this->faker->numberBetween(1, 8);
        $frequency = $this->faker->randomElement(['one_time', 'weekly', 'biweekly', 'monthly']) ?? 'one_time';
        
        // Create a booking instance to calculate pricing
        $booking = new Booking([
            'service_id' => $service->id,
            'duration_hours' => $duration,
            'frequency' => $frequency,
            'booking_date' => $this->faker->dateTimeBetween('now', '+2 months'),
        ]);
        
        // Calculate pricing using the BookingService
        $booking->calculatePricing();

        return [
            'service_id' => $service->id,
            'coupon_id' => null,
            'booking_number' => null, // Will be generated by model
            'customer_name' => $this->faker->name,
            'customer_email' => $this->faker->email,
            'customer_phone' => $this->faker->phoneNumber,
            'customer_address' => $this->faker->address,
            'booking_date' => $this->faker->dateTimeBetween('now', '+2 months'),
            'duration_hours' => $duration,
            'frequency' => $frequency,
            'base_amount' => $booking->base_amount,
            'discount_amount' => $booking->discount_amount,
            'final_amount' => $booking->final_amount,
            'status' => $this->faker->randomElement(['pending', 'confirmed', 'completed', 'cancelled']),
            'notes' => $this->faker->optional()->sentence,
            'additional_services' => null,
        ];
    }

    public function withCoupon()
    {
        return $this->state(function (array $attributes) {
            $coupon = Coupon::factory()->create();
            
            // Create a booking instance to calculate pricing with coupon
            $booking = new Booking([
                'service_id' => $attributes['service_id'],
                'coupon_id' => $coupon->id,
                'duration_hours' => $attributes['duration_hours'],
                'frequency' => $attributes['frequency'],
                'booking_date' => $attributes['booking_date'],
            ]);
            
            $booking->calculatePricing();
            
            return [
                'coupon_id' => $coupon->id,
                'base_amount' => $booking->base_amount,
                'discount_amount' => $booking->discount_amount,
                'final_amount' => $booking->final_amount,
            ];
        });
    }

    public function pending()
    {
        return $this->state(['status' => 'pending']);
    }

    public function confirmed()
    {
        return $this->state(['status' => 'confirmed']);
    }

    public function completed()
    {
        return $this->state(['status' => 'completed']);
    }

    public function cancelled()
    {
        return $this->state(['status' => 'cancelled']);
    }
} 